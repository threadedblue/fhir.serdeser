plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
    id 'maven-publish'
//    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.hl7.fhir.emf'
version = '0.0.1' // Set project-level property
def applicationName = 'fhir.serdeser' // Local variable for the artifact name


java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenLocal()
    mavenCentral()
    flatDir {
	    dirs 'libs'
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/resources'
           }
    }
}
configurations.all {
    exclude group: 'org.apache.logging.log4j'
}

dependencies {
	implementation 'org.hl7:fhir.emf:4.3.0'
	implementation 'org.eclipse.emfcloud:emfjson-jackson:2.2.0'    
	implementation 'org.eclipse.emf:org.eclipse.emf.common:2.40.0'
	implementation 'org.eclipse.emf:org.eclipse.emf.ecore:2.38.0'
	implementation 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.38.0'

   	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.6'
   	implementation 'org.slf4j:slf4j-api:2.0.9'
   	// Logging
    // implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0' // Now correct for Log4j 2.19.0+
    // implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
	// configurations.all {
    //     exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    // }
    
    api 'com.google.guava:guava:31.1-jre'
    testImplementation 'org.everit.json:org.everit.json.schema:1.5.0'
    testImplementation 'com.networknt:json-schema-validator:1.0.42'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0' 
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE  // Ignore duplicate entries

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.EC', 'META-INF/*.MF'
}

// shadowJar {
//     archiveClassifier.set('')
// }


processResources {
  from ('src/main/java') {
     include '**/*.ecore'
  }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    jvmArgs '-Djava.security.manager=allow'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId applicationName
            version project.version
            from(components.java)
        }
	}
}
